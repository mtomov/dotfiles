#!/usr/bin/env bash
#
# git-is-current
#
# License: MIT
# Copyright (c) 2012 Lennart C. L. Kats

set -e

# Internal config
USE_BETA=1

# Defaults
BRANCH=HEAD
NO_FETCH=
MAIN=main

if [ "$1" == "-q" ]; then
  QUIET=-q
  shift
fi

if [ "$1" == "-f" ]; then
  NO_FETCH=-f
  shift
fi

if [ "$1" == "-q" ]; then
  QUIET=-q
  shift
fi

if echo "$1" | grep origin/ >/dev/null; then
  MAIN=$1
  shift
fi

if [ "$1" != "" ]; then
  BRANCH="$1"
fi


if [ "$MAIN" == "" ]; then
  if [ "$USE_BETA" != "1" ]; then
    MAIN=origin/MAIN
  else
    FAIL=0
    if [ ! $NO_FETCH ]; then
      echo -n 'Fetching... '
      git fetch origin MAIN beta &>/dev/null
      echo -ne '\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b'
    fi
    $0 -f origin/MAIN $BRANCH || FAIL=1
    if git branch --list origin/beta >/dev/null; then
      $0 -f origin/beta  $BRANCH || FAIL=1
    fi
    exit $FAIL
  fi
fi

if [ ! $NO_FETCH ]; then
  M=`echo $MAIN | perl -pe 's/^origin\/(.*)/$1/'`
  echo -n 'Fetching... '
  git fetch origin $M &>/dev/null
  echo -ne '\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b'
fi

# Non-destructive version based on http://stackoverflow.com/a/6283843: doesn't detect "both added file" conflicts
BASE=`git merge-base $MAIN $BRANCH`
DIFF=`git merge-tree $BASE $MAIN $BRANCH || echo "added in -- git merge-tree failed"`
if echo "$DIFF" | grep -E '^.<<<<<' &>/dev/null; then
  echo -e "$BRANCH \033[01;32mCONFLICTS\033[00m with $MAIN"
  exit 1
elif echo "$DIFF" | grep -Ev '^added in' &>/dev/null; then
  if [ ! $QUIET ]; then
    echo "$BRANCH does not conflict with $MAIN"
  fi
  exit 0
fi

# Fallback: slow, in-repository check

OLD_BRANCH=`git get-branch`
STASH=

if ! (git checkout $MAIN && git checkout `git rev-parse HEAD`) &>/dev/null; then
  STASH=1
  git stash save "changes stashed by git-is-current" &>/dev/null ||
    (echo Could not stash current changes>&2; git stash; exit 1)
fi

git checkout $MAIN &>/dev/null
git checkout `git rev-parse HEAD` &>/dev/null
if git merge $BRANCH --no-ff --no-commit &>/dev/null; then
  if [ ! $QUIET ]; then
    echo "$BRANCH does not conflict with $MAIN"
  fi
  EXIT=0
else
  echo -e "$BRANCH \033[01;31mCONFLICTS\033[00m with $MAIN"
  EXIT=1
fi

git checkout -f $OLD_BRANCH &>/dev/null
if [ $STASH ]; then
  git stash pop &>/dev/null
fi

exit $EXIT
