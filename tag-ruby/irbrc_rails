# vi: ft=ruby
# hirb: some nice stuff for Rails
begin
  require "hirb"
  HIRB_LOADED = true
rescue LoadError
  HIRB_LOADED = false
end

require "logger"
require "awesome_print"

def loud_logger
  enable_hirb
  set_logger_to Logger.new(STDOUT)
end

def quiet_logger
  enable_hirb
  set_logger_to nil
end

def set_logger_to(logger)
  ActiveRecord::Base.logger = logger
  ActiveRecord::Base.clear_reloadable_connections!
end

# View class needs to come before enable()
if HIRB_LOADED
  class Hirb::Helpers::AwesomePrint
    def self.render(output, _options = {})
      ap(output)
    end
  end
end

def enable_hirb
  if HIRB_LOADED
    Hirb::Formatter.dynamic_config["ActiveRecord::Base"]

    Hirb.enable(output: { "Hash" => { class: "Hirb::Helpers::AwesomePrint" },
                          "Array" => { class: "Hirb::Helpers::AwesomePrint" } })
  else
    puts "hirb is not loaded"
  end
end

def disable_hirb
  if HIRB_LOADED
    Hirb.disable
  else
    puts "hirb is not loaded"
  end
end

def fuser(email)
  User.find_by(email: email)
end

def fmessage(message_id)
  Email::Message.find_by(message_ext_id: message_id)
end

# M = Email::Message
# A = Email::Address
# R = Email::Recipient

# set a nice prompt
# rails_root = File.basename(Dir.pwd)
# IRB.conf[:PROMPT] ||= {}
# IRB.conf[:PROMPT][:RAILS] = {
#   :PROMPT_I => "#{rails_root}> ",
#   :PROMPT_S => "#{rails_root}* ",
#   :PROMPT_C => "#{rails_root}? ",
#   :RETURN   => "=> %s\n"
# }
# IRB.conf[:PROMPT_MODE] = :RAILS

# turn on the loud logging by default
IRB.conf[:IRB_RC] = proc { quiet_logger }
